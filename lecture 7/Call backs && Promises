// call backs --> extension of a function without change its code 

function mydisplay(s) {
    document.getElementById("d").innerHTML = s;
}
function mycal(n1, n2, callback) {
    let sum = n1 + n2;
    callback(sum);
}
mycal(5, 5, mydisplay);

// Async function 
setTimeout(f, 1000);// f is a callback function
function f()
{
 document.getElementById("d").innerHTML = "hi hello";    
}

setTimeout(function f(){ ("hi hello"); }
   , 1000);

function f(value) {
    document.getElementById("d").innerHTML = value;    
}
    // f is a call back

setinterval(f, 1000);// f is a callback function
function f()
{
 document.getElementById("d").innerHTML = "hi hello";    
}

// promises--> combination of both
// producing code --->takes some time
// consuming code---->it waits for result

var ppromise = new Promise(function (myResolve, myReject) {
    // producing code
    myResolve();//200
    myReject();//404
});
// consuming code
ppromise.then(function (value) {
    // 200 
},
    function (error) {
        //404
    });
// eg2

function mydisplay(s) {
    document.getElementById("d").innerHTML = s;
}
var ppromise = new Promise(function (myResolve, myReject) {
    // producing code
    let x = 0;
    if (x == 0) {
        myResolve("ok");
    }
    else {
        myReject("error");
    }
});
// consuming code
ppromise.then(function (value) {
    // 200 
    mydisplay(value);
},
    function (error) {
         mydisplay(error);
    });

    //eg3 
let ppromise = new Promise(function (myResolve, myReject) {
    setTimeout(function () {
        myResolve("HI WELCOME");
    }, 1000);
});

ppromise.then(function (value) {
    document.getElementById("d").innerHTML = value;
}
);
// async---> async ---> always returns a promise
async function m() {
    return "hello";
}

function m()
{
    return ppromise.myResolve("hello");
}
var ppromise = new Promise(function (myResolve, myReject) {
    // producing code
    myResolve();//200
    myReject();//404
});
// consuming code
ppromise.then(function (value) {
    // 200 
},
    function (error) {
        //404
    });
// alternate way

async function m()
{
    return "hello";
}
m.then(function (value) {
    mydisplay(value);
},
    mydisplay(error));


//sort(a, a + n);


//await ---> promise 


async function mydisplay() {
    var ppromise = new Promise(function (myResolve, myReject) {
    // producing code
    myResolve("hiiiii");//200
    
    });
    document.getElementById("d").innerHTML = await ppromise;
}
mydisplay();



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1> ADVANCED JS </h1>
    <h1 id="d"> ADVANCED  JS </h1>
    <script>
        async function mydisplay() {
                var ppromise = new Promise(function (myResolve, myReject) {
                    // producing code
                    myResolve("hiiiii");//200

                });
                document.getElementById("d").innerHTML = await ppromise;
            }
            mydisplay();
    </script>
</body>
</html>
